generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String       @id @default(auto()) @map("_id") @db.ObjectId
  email                   String       @unique
  emailVerified           DateTime?
  password                String
  name                    String?
  image                   String?
  accountType             String // "individual" or "team"
  userType                String? // "designer", "frontend", etc.
  experienceLevel         String? // "beginner", "intermediate", "advanced"
  referralSource          String? // "social-media", "search-engine", etc.
  sites                   Site[]       @relation("UserSites")
  teams                   TeamMember[]
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  Team                    Team[]
  verificationToken       String?      @unique // Add this field
  verificationTokenExpiry DateTime? // Add this field
}

model Team {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  focus     String?
  teamSize  String? // "1-5", "6-10", "11+"
  adminId   String       @db.ObjectId
  admin     User         @relation(fields: [adminId], references: [id])
  members   TeamMember[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model TeamMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  teamId    String   @db.ObjectId
  team      Team     @relation(fields: [teamId], references: [id])
  email     String?
  role      String // "admin", "editor", "viewer"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Site {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  path            String   @unique
  description     String?
  content         Json
  metaTitle       String?
  metaDescription String?
  metaIcon        String?
  bgColor         String   @default("white")
  font            String?
  pages           Page[]   @relation("SitePages")
  userId          String   @db.ObjectId
  mediaLibrary    String[]
  leads           Json[]
  user            User     @relation("UserSites", fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, path])
}

model Page {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  path        String
  content     Json
  isPublished Boolean  @default(false)
  parentId    String?  @db.ObjectId
  parent      Page?    @relation("PageHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Page[]   @relation("PageHierarchy")
  siteId      String   @db.ObjectId
  site        Site     @relation("SitePages", fields: [siteId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([siteId, path])
}

model Template {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  description String
  content     Json
  image       String
  category    String
  features    String[]
}

model Component {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Image       String
  name        String
  description String?
  content     Json
  zones       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
